// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type ArticleInfo struct {
	ID          int      `json:"id"`
	Name        string   `json:"name"`
	Text        string   `json:"text"`
	Complexity  string   `json:"complexity"`
	ReadingTime string   `json:"readingTime"`
	Tags        []string `json:"tags"`
	Likes       int      `json:"likes"`
	LikedByUser bool     `json:"likedByUser"`
}

type ArticlesPagination struct {
	Items    []*ArticleInfo  `json:"items"`
	PageInfo *PaginationInfo `json:"pageInfo"`
}

type LikePayload struct {
	Status Status `json:"status"`
}

type Mutation struct {
}

type PaginationInfo struct {
	Page            int  `json:"page"`
	PageSize        int  `json:"pageSize"`
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type Query struct {
}

type UnlikePayload struct {
	Status Status `json:"status"`
}

type Status string

const (
	StatusSuccess Status = "SUCCESS"
	StatusFail    Status = "FAIL"
)

var AllStatus = []Status{
	StatusSuccess,
	StatusFail,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusSuccess, StatusFail:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
