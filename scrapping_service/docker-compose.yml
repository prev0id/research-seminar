version: '3.8'

services:
  pgdb:
    container_name: pgdb_scrapping
    image: postgres:alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: scrapping
      POSTGRES_USER: articles
      POSTGRES_PASSWORD: articles
    volumes:
      - ./docker_init.sql:/docker-entrypoint-initdb.d/docker_init.sql
      - pgdata:/var/lib/postgresql/data

  pgAdmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 15432:80
    depends_on:
      - pgdb

  zookeeper:
    image: zookeeper:latest
    ports:
      - "127.0.0.1:2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -vz localhost 9092
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "scrapping:1:1"

  scrapping:
#    profiles:
#      - donotstart
#    image: drc0de/scrapping:1.0.0
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scrapping
    environment:
      - TZ = 'Europe/Moscow'
    depends_on:
      kafka:
        condition: service_healthy
      pgdb:
        condition: service_started
    volumes:
      - ./config/config.yaml:/app/config/config.yaml
    ports:
      - "9003:9003"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"

networks:
  default:
    driver: bridge

volumes:
  pgdata: